// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role       @default(USER)
  properties    Property[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  AGENT
  ADMIN
}

model Property {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.VarChar(600)
  price         String
  area          String
  buildingArea  String
  bedroomCount  Int
  bathroomCount Int
  city          String
  state         String
  locationValue String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  latitude      Float
  longitude     Float

  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String?

  images Media[]

  @@index([ownerId])
}

model Media {
  id        String   @id @default(cuid())
  url       String?  @default("https://placehold.co/600x600/png?text=Image+Placeholder&font=roboto")
  path      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId String?
}
